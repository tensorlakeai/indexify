---
source: src/state/store/mod.rs
assertion_line: 873
expression: sm
---
StateMachine(
  last_applied_log: Some(LogId(
    leader_id: LeaderId(
      term: 0,
      node_id: 0,
    ),
    index: 0,
  )),
  last_membership: StoredMembership(
    log_id: Some(LogId(
      leader_id: LeaderId(
        term: 0,
        node_id: 0,
      ),
      index: 0,
    )),
    membership: Membership(
      configs: [
        [
          0,
        ],
      ],
      nodes: {
        0: BasicNode(
          addr: "localhost:8080",
        ),
      },
    ),
  ),
  executors: {
    "test": ExecutorMetadata(
      id: "test",
      last_seen: 0,
      addr: "localhost:8080",
      extractor: ExtractorDescription(
        name: "test",
        description: "test",
        input_params: {
          "description": "test",
          "input_params": [],
          "name": "test",
          "outputs": [],
        },
        outputs: {
          "test": attributes({
            "description": "test",
            "input_params": [],
            "name": "test",
            "outputs": [],
          }),
        },
        input_mime_types: [
          "text/plain",
        ],
      ),
    ),
  },
  tasks: {
    "test": Task(
      id: "test",
      extractor: "test",
      extractor_binding: "test",
      output_index_table_mapping: {},
      repository: "test",
      content_metadata: ContentMetadata(
        id: "test_id",
        parent_id: "test_parent_id",
        repository: "test_repository",
        name: "test_name",
        content_type: "test_content_type",
        labels: {
          "key1": "value1",
          "key2": "value2",
        },
        storage_url: "http://example.com/test_url",
        created_at: 1234567890,
        source: "test_source",
      ),
      input_params: {
        "description": "test",
        "input_params": [],
        "name": "test",
        "outputs": [],
      },
      outcome: Success,
    ),
  },
  unassigned_tasks: [
    "test",
  ],
  task_assignments: {
    "test": [
      "test",
    ],
  },
  extraction_events: {
    "test": ExtractionEvent(
      id: "test_id",
      repository: "test_repository",
      payload: CreateContent(
        content: ContentMetadata(
          id: "test_id",
          parent_id: "test_parent_id",
          repository: "test_repository",
          name: "test_name",
          content_type: "test_content_type",
          labels: {
            "key1": "value1",
            "key2": "value2",
          },
          storage_url: "http://example.com/test_url",
          created_at: 1234567890,
          source: "test_source",
        ),
      ),
      created_at: 1234567890,
      processed_at: Some(1234567890),
    ),
  },
  unprocessed_extraction_events: [
    "test",
  ],
  content_table: {
    "test": ContentMetadata(
      id: "test_id",
      parent_id: "test_parent_id",
      repository: "test_repository",
      name: "test_name",
      content_type: "test_content_type",
      labels: {
        "key1": "value1",
        "key2": "value2",
      },
      storage_url: "http://example.com/test_url",
      created_at: 1234567890,
      source: "test_source",
    ),
  },
  content_repository_table: {
    "test": [
      "test",
    ],
  },
  bindings_table: {
    "test": [
      ExtractorBinding(
        id: "test_id",
        name: "test_name",
        repository: "test_repository",
        extractor: "test_extractor",
        filters: {
          "key1": "value1",
          "key2": "value2",
        },
        input_params: {
          "description": "test",
          "input_params": [],
          "name": "test",
          "outputs": [],
        },
        output_index_name_mapping: {},
        index_name_table_mapping: {},
        content_source: "test_content_source",
      ),
    ],
  },
  extractor_executors_table: {
    "test": [
      "test",
    ],
  },
  extractors: {
    "test": ExtractorDescription(
      name: "test",
      description: "test",
      input_params: {
        "description": "test",
        "input_params": [],
        "name": "test",
        "outputs": [],
      },
      outputs: {
        "test": attributes({
          "description": "test",
          "input_params": [],
          "name": "test",
          "outputs": [],
        }),
      },
      input_mime_types: [
        "text/plain",
      ],
    ),
  },
  repositories: [
    "test",
  ],
  repository_extractors: {
    "test": [
      Index(
        repository: "test_repository",
        name: "test_name",
        table_name: "test_table_name",
        schema: "test_schema",
        extractor_binding: "test_extractor_binding",
        extractor: "test_extractor",
      ),
    ],
  },
  index_table: {
    "test": Index(
      repository: "test_repository",
      name: "test_name",
      table_name: "test_table_name",
      schema: "test_schema",
      extractor_binding: "test_extractor_binding",
      extractor: "test_extractor",
    ),
  },
)
