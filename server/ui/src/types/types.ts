// This file is auto-generated by @hey-api/openapi-ts

export type Allocation = {
  attempt_number: number
  created_at: number
  execution_duration_ms?: number | null
  executor_id: string
  function_executor_id: string
  function_name: string
  id: string
  outcome: FunctionRunOutcome
}

export type Application = {
  created_at?: number
  description: string
  entrypoint: EntryPointManifest
  functions: {
    [key: string]: ApplicationFunction
  }
  name: string
  namespace: string
  tags: {
    [key: string]: string
  }
  tombstoned?: boolean
  version: string
}

export type ApplicationFunction = {
  cache_key?: null | CacheKey
  description: string
  initialization_timeout_sec?: TimeoutSeconds
  max_concurrency: number
  name: string
  parameters?: Array<ParameterMetadata>
  placement_constraints: PlacementConstraints
  resources: FunctionResources
  retry_policy: NodeRetryPolicy
  return_type?: unknown
  secret_names: Array<string>
  timeout_sec: TimeoutSeconds
}

export type ApplicationRequests = {
  next_cursor?: string | null
  prev_cursor?: string | null
  requests: Array<ShallowRequest>
}

export type ApplicationsList = {
  applications: Array<Application>
  cursor?: string | null
}

export type CacheKey = string

export type CreateNamespace = {
  blob_storage_bucket?: string | null
  blob_storage_region?: string | null
  name: string
}

export type CursorDirection = 'forward' | 'backward'

export type EntryPointManifest = {
  function_name: string
  input_serializer: string
  output_serializer: string
  output_type_hints_base64: string
}

export type ExecutorAllocations = {
  count: number
  executor_id: string
  function_executors: Array<FnExecutor>
}

export type ExecutorMetadata = {
  addr: string
  clock: number
  executor_version: string
  free_resources: HostResources
  function_allowlist?: Array<FunctionAllowlist> | null
  function_executors: Array<FunctionExecutorMetadata>
  host_resources: HostResources
  id: string
  labels: {
    [key: string]: string
  }
  server_only_function_executors: Array<FunctionExecutorMetadata>
  state: string
  state_hash: string
  tombstoned: boolean
}

export type ExecutorsAllocationsResponse = {
  executors: Array<ExecutorAllocations>
}

export type FnExecutor = {
  allocations: Array<Allocation>
  count: number
  desired_state: string
  fn_uri: string
  function_executor_id: string
  state: string
}

export type _Function = {
  cache_key?: null | CacheKey
  description: string
  fn_name: string
  initialization_timeout_sec?: TimeoutSeconds
  input_encoder?: string
  max_concurrency?: number
  name: string
  output_encoder?: string
  parameters?: Array<ParameterMetadata>
  placement_constraints?: PlacementConstraints
  resources?: FunctionResources
  retry_policy?: NodeRetryPolicy
  return_type?: unknown
  secret_names?: Array<string>
  timeout_sec?: TimeoutSeconds
}

export type FunctionAllowlist = {
  application?: string | null
  function?: string | null
  namespace?: string | null
  version?: string | null
}

export type FunctionExecutorMetadata = {
  application_name: string
  desired_state: string
  function_name: string
  id: string
  max_concurrency: number
  namespace: string
  state: string
  version: string
}

export type FunctionResources = {
  cpus: number
  ephemeral_disk_mb: number
  gpus?: Array<GpuResources>
  memory_mb: number
}

export type FunctionRun = {
  allocations: Array<Allocation>
  application: string
  application_version: string
  created_at: number
  id: string
  name: string
  namespace: string
  outcome?: null | FunctionRunOutcome
  status: FunctionRunStatus
}

export type FunctionRunOutcome = 'Undefined' | 'Success' | 'Failure'

export type FunctionRunStatus = 'Pending' | 'Running' | 'Completed'

export type GpuResources = {
  count: number
  model: string
}

export type HostResources = {
  cpu_count: number
  disk_bytes: number
  gpu?: null | GpuResources
  memory_bytes: number
}

export type IndexifyApiError = {
  message: string
}

export type ListParams = {
  cursor?: string | null
  direction?: null | CursorDirection
  limit?: number | null
}

export type Namespace = {
  blob_storage_bucket?: string | null
  created_at: number
  name: string
}

export type NamespaceList = {
  namespaces: Array<Namespace>
}

export type NodeRetryPolicy = {
  delay_multiplier: number
  initial_delay_sec: number
  max_delay_sec: number
  max_retries: number
}

export type ParameterMetadata = {
  data_type: unknown
  description?: string | null
  name: string
  required: boolean
}

export type PlacementConstraints = {
  /**
   * List of label filter expressions in the format "key=value",
   * "key!=value", etc.
   */
  filter_expressions?: Array<string>
}

export type Request = {
  application_version: string
  created_at: number
  function_runs: Array<FunctionRun>
  id: string
  outcome?: null | RequestOutcome
  request_error?: null | RequestError
}

export type RequestError = {
  function_name: string
  message: string
}

export type RequestFailureReason =
  | 'unknown'
  | 'internalerror'
  | 'functionerror'
  | 'requesterror'
  | 'constraintunsatisfiable'

export type RequestOutcome =
  | 'undefined'
  | 'success'
  | {
      failure: RequestFailureReason
    }

export type ShallowRequest = {
  application_version: string
  created_at: number
  function_runs_count: number
  id: string
  outcome?: null | RequestOutcome
}

export type StateChange = {
  application?: string | null
  change_type: string
  created_at: number
  id: string
  namespace?: string | null
  object_id: string
  request?: string | null
}

export type StateChangesResponse = {
  count: number
  state_changes: Array<StateChange>
}

export type TimeoutSeconds = number

export type UnallocatedFunctionRuns = {
  count: number
  function_runs: Array<FunctionRun>
}

export type ApplicationsData = {
  body?: never
  path: {
    namespace: string
  }
  query?: {
    limit?: number | null
    cursor?: string | null
    direction?: null | CursorDirection
  }
  url: '/v1/namespaces/{namespace}/applications'
}

export type ApplicationsErrors = {
  /**
   * internal server error
   */
  500: unknown
}

export type ApplicationsResponses = {
  /**
   * lists applications
   */
  200: ApplicationsList
}

export type ApplicationsResponse =
  ApplicationsResponses[keyof ApplicationsResponses]

export type CreateOrUpdateApplicationData = {
  body: {
    application: Application
    code: Blob | File
  }
  path: {
    namespace: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications'
}

export type CreateOrUpdateApplicationErrors = {
  /**
   * unable to create or update application
   */
  500: unknown
}

export type CreateOrUpdateApplicationResponses = {
  /**
   * create or update an application
   */
  200: unknown
}

export type DeleteApplicationData = {
  body?: never
  path: {
    namespace: string
    application: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications/{application}'
}

export type DeleteApplicationErrors = {
  /**
   * unable to delete application
   */
  400: unknown
}

export type DeleteApplicationResponses = {
  /**
   * application deleted successfully
   */
  200: unknown
}

export type GetApplicationData = {
  body?: never
  path: {
    namespace: string
    application: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications/{application}'
}

export type GetApplicationErrors = {
  /**
   * internal server error
   */
  500: unknown
}

export type GetApplicationResponses = {
  /**
   * application definition
   */
  200: Application
}

export type GetApplicationResponse =
  GetApplicationResponses[keyof GetApplicationResponses]

export type InvokeApplicationWithObjectV1Data = {
  body: unknown
  path: {
    namespace: string
    application: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications/{application}'
}

export type InvokeApplicationWithObjectV1Errors = {
  /**
   * bad request
   */
  400: unknown
  /**
   * internal server error
   */
  500: unknown
}

export type InvokeApplicationWithObjectV1Responses = {
  /**
   * request successful
   */
  200: unknown
}

export type ListRequestsData = {
  body?: never
  path: {
    namespace: string
    application: string
  }
  query?: {
    limit?: number | null
    cursor?: string | null
    direction?: null | CursorDirection
  }
  url: '/v1/namespaces/{namespace}/applications/{application}/requests'
}

export type ListRequestsErrors = {
  /**
   * Internal Server Error
   */
  500: unknown
}

export type ListRequestsResponses = {
  /**
   * List Application requests
   */
  200: ApplicationRequests
}

export type ListRequestsResponse =
  ListRequestsResponses[keyof ListRequestsResponses]

export type DeleteRequestData = {
  body?: never
  path: {
    namespace: string
    application: string
    request_id: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications/{application}/requests/{request_id}'
}

export type DeleteRequestErrors = {
  /**
   * request not found
   */
  404: unknown
  /**
   * internal server error
   */
  500: unknown
}

export type DeleteRequestResponses = {
  /**
   * request has been deleted
   */
  200: unknown
}

export type FindRequestData = {
  body?: never
  path: {
    namespace: string
    application: string
    request_id: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications/{application}/requests/{request_id}'
}

export type FindRequestErrors = {
  /**
   * request not found
   */
  404: unknown
  /**
   * internal server error
   */
  500: unknown
}

export type FindRequestResponses = {
  /**
   * details about a given request
   */
  200: Request
}

export type FindRequestResponse =
  FindRequestResponses[keyof FindRequestResponses]

export type V1DownloadFnOutputPayloadSimpleData = {
  body?: never
  path: {
    namespace: string
    application: string
    request_id: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications/{application}/requests/{request_id}/output'
}

export type V1DownloadFnOutputPayloadSimpleErrors = {
  /**
   * resource not found
   */
  404: unknown
  /**
   * internal server error
   */
  500: unknown
}

export type V1DownloadFnOutputPayloadSimpleResponses = {
  /**
   * function output
   */
  200: unknown
}

export type V1DownloadFnOutputPayloadHeadData = {
  body?: never
  path: {
    namespace: string
    application: string
    request_id: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications/{application}/requests/{request_id}/output'
}

export type V1DownloadFnOutputPayloadHeadErrors = {
  /**
   * resource not found
   */
  404: unknown
  /**
   * internal server error
   */
  500: unknown
}

export type V1DownloadFnOutputPayloadHeadResponses = {
  /**
   * function output exists
   */
  200: unknown
  /**
   * function output does not exist
   */
  204: void
}

export type V1DownloadFnOutputPayloadHeadResponse =
  V1DownloadFnOutputPayloadHeadResponses[keyof V1DownloadFnOutputPayloadHeadResponses]

export type V1DownloadFnOutputPayloadData = {
  body?: never
  path: {
    namespace: string
    application: string
    request_id: string
    fn_call_id: string
  }
  query?: never
  url: '/v1/namespaces/{namespace}/applications/{application}/requests/{request_id}/output/{fn_call_id}'
}

export type V1DownloadFnOutputPayloadErrors = {
  /**
   * resource not found
   */
  404: unknown
  /**
   * internal server error
   */
  500: unknown
}

export type V1DownloadFnOutputPayloadResponses = {
  /**
   * function output
   */
  200: unknown
}

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {})
}
