syntax = "proto3";


package indexify_coordinator;

service CoordinatorService {
    rpc CreateContent(CreateContentRequest) returns (CreateContentResponse) {}

    rpc TombstoneContent(TombstoneContentRequest) returns (TombstoneContentResponse) {}

    rpc GetContentMetadata(GetContentMetadataRequest) returns (GetContentMetadataResponse) {}

    rpc GetContentTreeMetadata(GetContentTreeMetadataRequest) returns (GetContentTreeMetadataResponse) {}

    rpc ListContent(ListContentRequest) returns (ListContentResponse) {}

    rpc CreateExtractionPolicy(ExtractionPolicyRequest) returns (ExtractionPolicyResponse) {}

    rpc ListExtractionPolicies(ListExtractionPoliciesRequest) returns (ListExtractionPoliciesResponse) {}

    rpc CreateNS(CreateNamespaceRequest) returns (CreateNamespaceResponse) {}

    rpc ListNS(ListNamespaceRequest) returns (ListNamespaceResponse) {}

    rpc GetNS(GetNamespaceRequest) returns (GetNamespaceResponse) {}

    rpc ListExtractors(ListExtractorsRequest) returns (ListExtractorsResponse) {}

    rpc RegisterExecutor(RegisterExecutorRequest) returns (RegisterExecutorResponse) {}

    rpc RegisterIngestionServer(RegisterIngestionServerRequest) returns (RegisterIngestionServerResponse) {}

    rpc RemoveIngestionServer(RemoveIngestionServerRequest) returns (RemoveIngestionServerResponse) {}

    rpc CreateGCTasks(CreateGCTasksRequest) returns (CreateGCTasksResponse) {}

    rpc GCTasksStream(stream GCTaskAcknowledgement) returns (stream CoordinatorCommand) {}

    rpc Heartbeat(stream HeartbeatRequest) returns (stream HeartbeatResponse) {}

    rpc ListIndexes(ListIndexesRequest) returns (ListIndexesResponse) {}

    rpc GetIndex(GetIndexRequest) returns (GetIndexResponse) {}

    rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse) {}

    rpc GetExtractorCoordinates(GetExtractorCoordinatesRequest) returns (GetExtractorCoordinatesResponse) {}

    rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {}

    rpc ListStateChanges(ListStateChangesRequest) returns (ListStateChangesResponse) {}

    rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {}

    rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse) {}

    rpc ListSchemas(GetAllSchemaRequest) returns (GetAllSchemaResponse) {}

    rpc GetRaftMetricsSnapshot(GetRaftMetricsSnapshotRequest) returns (RaftMetricsSnapshotResponse) {}

    rpc GetAllTaskAssignments(GetAllTaskAssignmentRequest) returns (TaskAssignments) {}

    rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}
}

message GetContentMetadataRequest {
    repeated string content_list = 1;
}

message GetContentMetadataResponse {
    map<string, ContentMetadata> content_list = 1;
}

message GetContentTreeMetadataRequest {
    string content_id = 1;
}

message GetContentTreeMetadataResponse {
    repeated ContentMetadata content_list = 1;
}

enum TaskOutcome {
    UNKNOWN = 0;
    FAILED = 1;
    SUCCESS = 2;
}

message UpdateTaskRequest {
    string executor_id = 1;
    string task_id = 2;
    TaskOutcome outcome = 3;
    repeated ContentMetadata content_list = 4;
    string content_id = 5;
    string extraction_policy_name = 6;
}

message ListStateChangesRequest {
}

message StateChange {
    string id = 1;
    string object_id = 2;
    string change_type = 3;
    uint64 created_at = 4;
    uint64 processed_at = 5;
}

message ListStateChangesResponse {
    repeated StateChange changes = 1;
}

message ListTasksRequest {
    string namespace = 1;
    string extraction_policy = 2;
}

message ListTasksResponse {
    repeated Task tasks = 1;
}

message UpdateTaskResponse {
}

message GetExtractorCoordinatesRequest {
    string extractor = 2;
}

message GetExtractorCoordinatesResponse {
    repeated string addrs = 1;
}

message ListIndexesRequest {
    string namespace = 1;
}

message ListIndexesResponse {
    repeated Index indexes = 1;
}

message GetIndexRequest {
    string namespace = 1;
    string name = 2;
}

message GetIndexResponse {
    Index index = 1;
}

message CreateIndexRequest {
    Index index = 2;
}

message CreateIndexResponse {
}

message Index {
    string name = 1;
    string namespace = 2;
    string table_name = 3;
    string schema = 4;
    string extraction_policy = 5;
    string extractor = 6;
}

message Embedding {
    repeated float embedding = 1;
}

message Attributes {
    string attributes = 2;
}

message Feature {
    string name = 1;
    Embedding embedding = 2;
    Attributes attributes = 3;
}

message Content {
    string mime = 2;
    bytes data = 3;
    repeated Feature features = 4;
}

message RegisterExecutorRequest {
    string executor_id = 1;
    string addr = 2;
    Extractor extractor = 3;
}

message RegisterExecutorResponse {
    string executor_id = 1;
}

message RegisterIngestionServerRequest {
    string ingestion_server_id = 1;
}

message RegisterIngestionServerResponse {

}

message RemoveIngestionServerRequest {
    string ingestion_server_id = 1;
}

message RemoveIngestionServerResponse {

}

message CreateGCTasksRequest {
    StateChange state_change = 1;
}

message CreateGCTasksResponse {

}

message CoordinatorCommand {
    GCTask gc_task = 1;
}

message GCTaskAcknowledgement {
    string task_id = 1;
    bool completed = 2;
    string ingestion_server_id = 3;
}

message GCTask {
    string task_id = 1;
    string namespace = 2;
    string content_id = 3;
    repeated string output_tables = 5;
    string blob_store_path = 6;
}

message HeartbeatRequest {
    string executor_id = 1;
    int64 pending_tasks = 2;
}

message HeartbeatResponse {
    string executor_id = 1;
    repeated Task tasks = 2;
}

message Task {
    string id = 1;
    string extractor = 2;
    string namespace = 3;
    ContentMetadata content_metadata = 4;
    string input_params = 5;
    string extraction_policy_id = 6;
    // mapping of extractor names to index tables
    map<string, string> output_index_mapping = 7;
    TaskOutcome outcome = 8;
    // list of all tables that the content may belong to
    repeated string index_tables = 9;
}

message ListExtractorsRequest {

}

message ListExtractorsResponse{
    repeated Extractor extractors = 1;
}

message Extractor {
    string name = 1;
    string description = 2;
    string input_params = 3;
    map<string, string> embedding_schemas = 4;
    map<string, string> metadata_schemas = 5;
    repeated string input_mime_types = 6;
}

message GetNamespaceRequest {
    string name = 1;
}

message GetNamespaceResponse {
    Namespace namespace = 1;
}

message ListContentRequest {
    string namespace = 1;
    string source = 2;
    string parent_id = 3;
    map<string, string> labels_eq = 4;
}

message ListContentResponse {
    repeated ContentMetadata content_list = 1; 
}

message ListExtractionPoliciesRequest {
    string namespace = 1;
}

message ListExtractionPoliciesResponse {
    repeated ExtractionPolicy policies = 1;
}

message CreateNamespaceRequest {
    string name = 1;
    repeated ExtractionPolicy policies = 2;
}

message CreateNamespaceResponse {
    string name = 1;
    int64 created_at = 2;
}


message ListNamespaceRequest {
}

message ListNamespaceResponse {
    repeated Namespace namespaces = 1;
}

message ExtractionPolicy {
    string id = 1;
    string extractor = 2;
    string name = 3;
    string input_params = 4;
    map<string, string> filters = 5;
    string content_source = 6;
}

message ExtractionPolicyRequest {
    string namespace = 1;
    string extractor = 2;
    string name = 3;
    string input_params = 4;
    map<string, string> filters = 5;
    string content_source = 6;
    int64 created_at = 7;
}

message ExtractionPolicyResponse {
    int64 created_at = 1;
    Extractor extractor = 2;
    ExtractionPolicy extraction_policy = 3;
    map<string, string> index_name_table_mapping = 4;
    map<string, string> output_index_name_mapping = 5;
}

message ContentMetadata {
    string id = 1;
    string file_name = 2;
    string parent_id = 3;
    string mime = 4;
    map<string, string> labels = 5;
    string storage_url = 6;
    int64 created_at = 7;
    string namespace = 8;
    string source = 9;
    uint64 size_bytes = 10;
    string hash = 11;
    map<string, uint64> extraction_policy_ids = 12;
    string root_content_id = 13;
}

message CreateContentRequest {
    ContentMetadata content = 2;
}

message CreateContentResponse {
    string id = 1;
}

message TombstoneContentRequest {
    string namespace = 1;
    repeated string content_ids = 2;
}

message TombstoneContentResponse {}

message Namespace {
    string name = 1;
    repeated ExtractionPolicy policies = 2;
}

message GetSchemaRequest {
    string namespace = 1;
    string content_source = 2;
}

message GetSchemaResponse {
    StructuredDataSchema schema = 1;
}

message StructuredDataSchema {
    string columns = 1;
    string content_source = 2;
}

message GetAllSchemaRequest {
    string namespace = 1;
}

message GetAllSchemaResponse {
    repeated StructuredDataSchema schemas = 1;
}

//  Raft Metrics Snapshot
message GetRaftMetricsSnapshotRequest {}

message Uint64List {
  repeated uint64 values = 1;
}

message RaftMetricsSnapshotResponse {
    //  indexify metrics
    map<string, uint64> fail_connect_to_peer = 1;
    map<string, uint64> sent_bytes = 2;
    map<string, uint64> recv_bytes = 3;
    map<string, uint64> sent_failures = 4;
    map<string, uint64> snapshot_send_success = 5;
    map<string, uint64> snapshot_send_failure = 6;
    map<string, uint64> snapshot_recv_success = 7;
    map<string, uint64> snapshot_recv_failure = 8;
    map<string, uint64> snapshot_send_inflights = 9;
    map<string, uint64> snapshot_recv_inflights = 10;
    map<string, Uint64List> snapshot_sent_seconds = 11;
    map<string, Uint64List> snapshot_recv_seconds = 12;
    repeated uint64 snapshot_size = 13;
    uint64 last_snapshot_creation_time_millis = 14;
    //  open raft metrics
    bool running_state_ok = 15;
    uint64 id = 16;
    uint64 current_term = 17;
    uint64 vote = 18;
    uint64 last_log_index = 19;
    uint64 current_leader = 20;
}
//  End Raft Metrics Snapshot

message GetAllTaskAssignmentRequest {
}

message TaskAssignments {
    map<string, string> assignments = 1;
}

message GetTaskRequest {
    string task_id = 1;
}

message GetTaskResponse {
    Task task = 1;
}
