syntax = "proto3";


package indexify_coordinator;

service CoordinatorService {
    rpc CreateContent(CreateContentRequest) returns (CreateContentResponse) {}

    rpc GetContentMetadata(GetContentMetadataRequest) returns (GetContentMetadataResponse) {}

    rpc ListContent(ListContentRequest) returns (ListContentResponse) {}

    rpc CreateExtractionPolicy(ExtractionPolicyRequest) returns (ExtractionPolicyResponse) {}

    rpc ListExtractionPolicies(ListExtractionPoliciesRequest) returns (ListExtractionPoliciesResponse) {}

    rpc CreateNS(CreateNamespaceRequest) returns (CreateNamespaceResponse) {}

    rpc ListNS(ListNamespaceRequest) returns (ListNamespaceResponse) {}

    rpc GetNS(GetNamespaceRequest) returns (GetNamespaceResponse) {}

    rpc ListExtractors(ListExtractorsRequest) returns (ListExtractorsResponse) {}

    rpc RegisterExecutor(RegisterExecutorRequest) returns (RegisterExecutorResponse) {}

    rpc Heartbeat(stream HeartbeatRequest) returns (stream HeartbeatResponse) {}

    rpc ListIndexes(ListIndexesRequest) returns (ListIndexesResponse) {}

    rpc GetIndex(GetIndexRequest) returns (GetIndexResponse) {}

    rpc CreateIndex(CreateIndexRequest) returns (CreateIndexResponse) {}

    rpc GetExtractorCoordinates(GetExtractorCoordinatesRequest) returns (GetExtractorCoordinatesResponse) {}

    rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {}

    rpc ListStateChanges(ListStateChangesRequest) returns (ListStateChangesResponse) {}

    rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {}

    rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse) {}

    rpc ListSchemas(GetAllSchemaRequest) returns (GetAllSchemaResponse) {}
}

message GetContentMetadataRequest {
    repeated string content_list = 1;
}

message GetContentMetadataResponse {
    repeated ContentMetadata content_list = 1;
}

enum TaskOutcome {
    UNKNOWN = 0;
    FAILED = 1;
    SUCCESS = 2;
}

message UpdateTaskRequest {
    string executor_id = 1;
    string task_id = 2;
    TaskOutcome outcome = 3;
    repeated ContentMetadata content_list = 4;
}

message ListStateChangesRequest {
}

message StateChange {
    string id = 1;
    string object_id = 2;
    string change_type = 3;
    uint64 created_at = 4;
    uint64 processed_at = 5;
}

message ListStateChangesResponse {
    repeated StateChange changes = 1;
}

message ListTasksRequest {
    string namespace = 1;
    string extraction_policy = 2;
}

message ListTasksResponse {
    repeated Task tasks = 1;
}

message UpdateTaskResponse {
}

message GetExtractorCoordinatesRequest {
    string extractor = 2;
}

message GetExtractorCoordinatesResponse {
    repeated string addrs = 1;
}

message ListIndexesRequest {
    string namespace = 1;
}

message ListIndexesResponse {
    repeated Index indexes = 1;
}

message GetIndexRequest {
    string namespace = 1;
    string name = 2;
}

message GetIndexResponse {
    Index index = 1;
}

message CreateIndexRequest {
    Index index = 2;
}

message CreateIndexResponse {
}

message Index {
    string name = 1;
    string namespace = 2;
    string table_name = 3;
    string schema = 4;
    string extraction_policy = 5;
    string extractor = 6;
}

message Embedding {
    repeated float embedding = 1;
}

message Attributes {
    string attributes = 2;
}

message Feature {
    string name = 1;
    Embedding embedding = 2;
    Attributes attributes = 3;
}

message Content {
    string mime = 2;
    bytes data = 3;
    repeated Feature features = 4;
}

message RegisterExecutorRequest {
    string executor_id = 1;
    string addr = 2;
    Extractor extractor = 3;
}

message RegisterExecutorResponse {
    string executor_id = 1;
}

message HeartbeatRequest {
    string executor_id = 1;
    int64 pending_tasks = 2;
}

message HeartbeatResponse {
    string executor_id = 1;
    repeated Task tasks = 2;
}

message Task {
    string id = 1;
    string extractor = 2;
    string namespace = 3;
    ContentMetadata content_metadata = 4;
    string input_params = 5;
    string extraction_policy = 6;
    map<string, string> output_index_mapping = 7;
    TaskOutcome outcome = 8;
}

message ListExtractorsRequest {

}

message ListExtractorsResponse{
    repeated Extractor extractors = 1;
}

message Extractor {
    string name = 1;
    string description = 2;
    string input_params = 3;
    map<string, string> outputs = 4;
    repeated string input_mime_types = 5;
}

message GetNamespaceRequest {
    string name = 1;
}

message GetNamespaceResponse {
    Namespace namespace = 1;
}

message ListContentRequest {
    string namespace = 1;
    string source = 2;
    string parent_id = 3;
    map<string, string> labels_eq = 4;
}

message ListContentResponse {
    repeated ContentMetadata content_list = 1; 
}

message ListExtractionPoliciesRequest {
    string namespace = 1;
}

message ListExtractionPoliciesResponse {
    repeated ExtractionPolicy policies = 1;
}

message CreateNamespaceRequest {
    string name = 1;
    repeated ExtractionPolicy policies = 2;
}

message CreateNamespaceResponse {
    string name = 1;
    int64 created_at = 2;
}


message ListNamespaceRequest {
}

message ListNamespaceResponse {
    repeated Namespace namespaces = 1;
}

message ExtractionPolicy {
    string extractor = 1;
    string name = 2;
    string input_params = 4;
    map<string, string> filters = 5;
    string content_source = 6;
}

message ExtractionPolicyRequest {
    string namespace = 1;
    ExtractionPolicy policy = 3;
    int64 created_at = 2;
}

message ExtractionPolicyResponse {
    int64 created_at = 3;
    Extractor extractor = 2;
    map<string, string> index_name_table_mapping = 4;
    map<string, string> output_index_name_mapping = 5;
}

message ContentMetadata {
    string id = 1;
    string file_name = 2;
    string parent_id = 3;
    string mime = 4;
    map<string, string> labels = 5;
    string storage_url = 6;
    int64 created_at = 7;
    string namespace = 8;
    string source = 9;
    uint64 size_bytes = 10;
}

message CreateContentRequest {
    ContentMetadata content = 2;
}

message CreateContentResponse {
    string id = 1;
}

message Namespace {
    string name = 1;
    repeated ExtractionPolicy policies = 2;
}

message GetSchemaRequest {
    string namespace = 1;
    string content_source = 2;
}

message GetSchemaResponse {
    StructuredDataSchema schema = 1;
}

message StructuredDataSchema {
    string schema = 1;
    string content_source = 2;
}

message GetAllSchemaRequest {
    string namespace = 1;
}

message GetAllSchemaResponse {
    repeated StructuredDataSchema schemas = 1;
}