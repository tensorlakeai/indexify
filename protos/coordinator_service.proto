syntax = "proto3";
import "google/protobuf/struct.proto";


package indexify_coordinator;

service CoordinatorService {
    rpc CreateContent(CreateContentRequest) returns (CreateContentResponse) {}

    rpc TombstoneContent(TombstoneContentRequest) returns (TombstoneContentResponse) {}

    rpc GetContentMetadata(GetContentMetadataRequest) returns (GetContentMetadataResponse) {}

    rpc GetContentTreeMetadata(GetContentTreeMetadataRequest) returns (GetContentTreeMetadataResponse) {}

    rpc ListContent(ListContentRequest) returns (ListContentResponse) {}

    rpc CreateExtractionGraph(CreateExtractionGraphRequest) returns (CreateExtractionGraphResponse) {}

    rpc ListExtractionGraphs(ListExtractionGraphRequest) returns (ListExtractionGraphResponse) {}

    rpc CreateNS(CreateNamespaceRequest) returns (CreateNamespaceResponse) {}

    rpc ListNS(ListNamespaceRequest) returns (ListNamespaceResponse) {}

    rpc ListExtractors(ListExtractorsRequest) returns (ListExtractorsResponse) {}

    rpc RegisterExecutor(RegisterExecutorRequest) returns (RegisterExecutorResponse) {}

    rpc RegisterIngestionServer(RegisterIngestionServerRequest) returns (RegisterIngestionServerResponse) {}

    rpc RemoveIngestionServer(RemoveIngestionServerRequest) returns (RemoveIngestionServerResponse) {}

    rpc CreateGCTasks(CreateGCTasksRequest) returns (CreateGCTasksResponse) {}

    rpc GCTasksStream(stream GCTaskAcknowledgement) returns (stream CoordinatorCommand) {}

    rpc Heartbeat(stream HeartbeatRequest) returns (stream HeartbeatResponse) {}

    rpc GetExtractionGraphAnalytics(GetExtractionGraphAnalyticsRequest) returns (GetExtractionGraphAnalyticsResponse) {}

    rpc ListIndexes(ListIndexesRequest) returns (ListIndexesResponse) {}

    rpc GetIndex(GetIndexRequest) returns (GetIndexResponse) {}

    rpc UpdateIndexesState(UpdateIndexesStateRequest) returns (UpdateIndexesStateResponse) {}

    rpc GetExtractorCoordinates(GetExtractorCoordinatesRequest) returns (GetExtractorCoordinatesResponse) {}

    rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {}

    rpc ListStateChanges(ListStateChangesRequest) returns (ListStateChangesResponse) {}

    rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {}

    rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse) {}

    rpc ListSchemas(GetAllSchemaRequest) returns (GetAllSchemaResponse) {}

    rpc GetRaftMetricsSnapshot(GetRaftMetricsSnapshotRequest) returns (RaftMetricsSnapshotResponse) {}

    rpc GetAllTaskAssignments(GetAllTaskAssignmentRequest) returns (TaskAssignments) {}

    rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}

    rpc GetIngestionInfo(GetIngestionInfoRequest) returns (GetIngestionInfoResponse) {}

    rpc WaitContentExtraction(WaitContentExtractionRequest) returns (WaitContentExtractionResponse) {}

    rpc ListActiveContents(ListActiveContentsRequest) returns (ListActiveContentsResponse) {}

    rpc UpdateLabels(UpdateLabelsRequest) returns (UpdateLabelsResponse) {}

    rpc ExecutorsHeartbeat(ExecutorsHeartbeatRequest) returns (ExecutorsHeartbeatResponse) {}

    rpc LinkExtractionGraphs(LinkExtractionGraphsRequest) returns (LinkExtractionGraphsResponse) {}

    rpc ExtractionGraphLinks(ExtractionGraphLinksRequest) returns (ExtractionGraphLinksResponse) {}

    rpc AddGraphToContent(AddGraphToContentRequest) returns (AddGraphToContentResponse) {}

    rpc ContentStream(ContentStreamRequest) returns (stream ContentStreamItem) {}

    rpc DeleteExtractionGraph(DeleteExtractionGraphRequest) returns (Empty) {}
}

message DeleteExtractionGraphRequest {
    string namespace = 1;
    string extraction_graph = 2;
}

message ContentStreamRequest {
    uint64 change_offset = 1;
    string namespace = 2;
    string extraction_graph = 3;
    string extraction_policy = 4;
}

message GetContentMetadataRequest {
    repeated string content_list = 1;
}

message GetContentMetadataResponse {
    repeated ContentMetadata content_list = 1;
}

message GetContentTreeMetadataRequest {
    string namespace = 1;
    string content_id = 2;
    string extraction_graph_name = 3;
    string extraction_policy = 4;
}

message GetContentTreeMetadataResponse {
    repeated ContentMetadata content_list = 1;
}

enum TaskOutcome {
    UNKNOWN = 0;
    FAILED = 1;
    SUCCESS = 2;
}

message UpdateTaskRequest {
    string executor_id = 1;
    string task_id = 2;
    TaskOutcome outcome = 3;
}

message ListStateChangesRequest {
}

message StateChange {
    uint64 id = 1;
    string object_id = 2;
    string change_type = 3;
    uint64 created_at = 4;
    uint64 processed_at = 5;
}

message ListStateChangesResponse {
    repeated StateChange changes = 1;
}

enum TaskOutcomeFilter {
    FILTER_NOT_SET = 0;
    FILTER_UNKNOWN = 1;
    FILTER_SUCCESS = 2;
    FILTER_FAILED = 3;
}

message ListTasksRequest {
    string namespace = 1;
    string extraction_policy = 2;
    string content_id = 3;
    string start_id = 4;
    uint64 limit = 5;
    TaskOutcomeFilter outcome = 7;

    string extraction_graph = 8;
}

message ListTasksResponse {
    repeated Task tasks = 1;
    uint64 total = 2;
}

message UpdateTaskResponse {
}

message GetExtractorCoordinatesRequest {
    string extractor = 2;
}

message GetExtractorCoordinatesResponse {
    repeated string addrs = 1;
}

message ListIndexesRequest {
    string namespace = 1;
}

message ListIndexesResponse {
    repeated Index indexes = 1;
}

message GetIndexRequest {
    string namespace = 1;
    string name = 2;
}

message GetIndexResponse {
    Index index = 1;
}

message UpdateIndexesStateRequest {
    repeated Index indexes = 1;
}

message UpdateIndexesStateResponse {}

message Index {
    string name = 1;
    string namespace = 2;
    string table_name = 3;
    string schema = 4;
    string extraction_policy = 5;
    string extractor = 6;
    string graph_name = 7;
}

message Embedding {
    repeated float embedding = 1;
}

message Attributes {
    string attributes = 2;
}

message Feature {
    string name = 1;
    Embedding embedding = 2;
    Attributes attributes = 3;
}

message Content {
    string mime = 2;
    bytes data = 3;
    repeated Feature features = 4;
}

message RegisterExecutorRequest {
    string executor_id = 1;
    string addr = 2;
    repeated Extractor extractors = 3;
}

message RegisterExecutorResponse {
    string executor_id = 1;
}

message RegisterIngestionServerRequest {
    string ingestion_server_id = 1;
}

message RegisterIngestionServerResponse {

}

message RemoveIngestionServerRequest {
    string ingestion_server_id = 1;
}

message RemoveIngestionServerResponse {

}

message CreateGCTasksRequest {
    StateChange state_change = 1;
}

message CreateGCTasksResponse {

}

message CoordinatorCommand {
    GCTask gc_task = 1;
}

message GCTaskAcknowledgement {
    string task_id = 1;
    bool completed = 2;
    string ingestion_server_id = 3;
}

enum GcTaskType {
    Delete = 0;
    UpdateLabels = 1;
    DeleteBlobStore = 2;
    DropIndexes = 3;
}

message GCTask {
    string task_id = 1;
    string namespace = 2;
    string content_id = 3;
    repeated string output_tables = 5;
    string blob_store_path = 6;
    GcTaskType task_type = 7;
}

message HeartbeatRequest {
    string executor_id = 1;
    int64 pending_tasks = 2;
    uint64 max_pending_tasks = 3;
}

message GetExtractionGraphAnalyticsRequest {
    string namespace = 1;
    string extraction_graph = 2;
}

message TaskAnalytics {
    uint64 pending = 1;
    uint64 success = 2;
    uint64 failure = 3;
}

message GetExtractionGraphAnalyticsResponse {
    map<string, TaskAnalytics> task_analytics = 1;
}

message HeartbeatResponse {
    string executor_id = 1;
    repeated Task tasks = 2;
}

message Task {
    string id = 1;
    string extractor = 2;
    string namespace = 3;
    ContentMetadata content_metadata = 4;
    string input_params = 5;
    string extraction_policy_id = 6;
    string extraction_graph_name = 7;
    // mapping of extractor names to index tables
    map<string, string> output_index_mapping = 8;
    TaskOutcome outcome = 9;
    // list of all tables that the content may belong to
    repeated string index_tables = 10;
}

message ListExtractorsRequest {

}

message ListExtractorsResponse{
    repeated Extractor extractors = 1;
}

message Extractor {
    string name = 1;
    string description = 2;
    string input_params = 3;
    map<string, string> embedding_schemas = 4;
    map<string, string> metadata_schemas = 5;
    repeated string input_mime_types = 6;
}

message Empty {
}

message ContentSource {
    oneof value {
        string policy = 1;
        Empty ingestion = 2;
        Empty none = 3;
    }
}

message ListContentRequest {
    string namespace = 1;
    ContentSource source = 2;
    string parent_id = 3;
    repeated string labels_filter = 4;
    uint64 limit = 5;
    string start_id = 6;
    string graph = 8;
    string ingested_content_id = 9;
}

message ListContentResponse {
    repeated ContentMetadata content_list = 1; 
    uint64 total = 2;
}

message ListExtractionGraphRequest {
    string namespace = 1;
}

message ListExtractionGraphResponse {
    repeated ExtractionGraph graphs = 1;
}

message CreateNamespaceRequest {
    string name = 1;
}

message CreateNamespaceResponse {
    string name = 1;
    int64 created_at = 2;
}


message ListNamespaceRequest {
}

message ListNamespaceResponse {
    repeated string namespaces = 1;
}

message ExtractionGraph {
    string id = 1;
    string namespace = 2;
    string name = 3;
    repeated ExtractionPolicy extraction_policies = 4;
    string description = 5;
}

message ExtractionPolicy {
    string id = 1;
    string extractor = 2;
    string name = 3;
    string input_params = 4;
    string content_source = 6;
    string graph_name = 7;
    map<string, string> output_table_mapping = 8;
    repeated string filter = 9;
}

message ExtractionPolicyRequest {
    string namespace = 1;
    string extractor = 2;
    string name = 3;
    string input_params = 4;
    string content_source = 6;
    int64 created_at = 7;
    repeated string filter = 8;
}

message CreateExtractionGraphRequest {
    string namespace = 1;
    string name = 2;
    string description = 4;
    repeated ExtractionPolicyRequest policies = 3;
}

message CreateExtractionGraphResponse {
    string graph_id = 1;
    map<string, Extractor> extractors = 2;
    map<string, ExtractionPolicy> policies = 3;
    repeated Index indexes = 5;
}

message ExtractionPolicyResponse {
    int64 created_at = 1;
    Extractor extractor = 2;
    ExtractionPolicy extraction_policy = 3;
    map<string, string> index_name_table_mapping = 4;
    map<string, string> output_index_name_mapping = 5;
}

message ContentMetadata {
    string id = 1;
    string file_name = 2;
    string parent_id = 3;
    string mime = 4;
    map<string, google.protobuf.Value> labels = 5;
    string storage_url = 6;
    int64 created_at = 7;
    string namespace = 8;
    string source = 9;
    uint64 size_bytes = 10;
    string hash = 11;
    map<string, uint64> extraction_policy_ids = 12;
    string root_content_id = 13;
    repeated string extraction_graph_names = 14;
    string extracted_metadata = 15;
}

message ContentStreamItem {
    ContentMetadata content = 1;
    uint64 change_offset = 2;
}

enum CreateContentStatus {
    CREATED = 0;
    DUPLICATE = 1;
}

message CreateContentRequest {
    ContentMetadata content = 2;
}

message CreateContentResponse {
    CreateContentStatus status = 2;
}

message TombstoneContentRequest {
    string namespace = 1;
    repeated string content_ids = 2;
}

message TombstoneContentResponse {}

message Namespace {
    string name = 1;
    repeated ExtractionGraph extraction_graphs = 2;
}

message GetSchemaRequest {
    string namespace = 1;
    string extraction_graph_name = 2;
}

message GetSchemaResponse {
    StructuredDataSchema schema = 1;
}

message StructuredDataSchema {
    string id = 1;
    string extraction_graph_name = 2;
    string namespace = 3;
    string columns = 4;
}

message GetAllSchemaRequest {
    string namespace = 1;
}

message GetAllSchemaResponse {
    repeated StructuredDataSchema schemas = 1;
}

//  Raft Metrics Snapshot
message GetRaftMetricsSnapshotRequest {}

message Uint64List {
  repeated uint64 values = 1;
}

message RaftMetricsSnapshotResponse {
    //  indexify metrics
    map<string, uint64> fail_connect_to_peer = 1;
    map<string, uint64> sent_bytes = 2;
    map<string, uint64> recv_bytes = 3;
    map<string, uint64> sent_failures = 4;
    map<string, uint64> snapshot_send_success = 5;
    map<string, uint64> snapshot_send_failure = 6;
    map<string, uint64> snapshot_recv_success = 7;
    map<string, uint64> snapshot_recv_failure = 8;
    map<string, uint64> snapshot_send_inflights = 9;
    map<string, uint64> snapshot_recv_inflights = 10;
    map<string, Uint64List> snapshot_sent_seconds = 11;
    map<string, Uint64List> snapshot_recv_seconds = 12;
    repeated uint64 snapshot_size = 13;
    uint64 last_snapshot_creation_time_millis = 14;
    //  open raft metrics
    bool running_state_ok = 15;
    uint64 id = 16;
    uint64 current_term = 17;
    uint64 vote = 18;
    uint64 last_log_index = 19;
    uint64 current_leader = 20;
}
//  End Raft Metrics Snapshot

message GetAllTaskAssignmentRequest {
}

message TaskAssignments {
    map<string, string> assignments = 1;
}

message GetTaskRequest {
    string task_id = 1;
}

message GetTaskResponse {
    Task task = 1;
}

message GetIngestionInfoRequest {
    string task_id = 1;
}

message GetIngestionInfoResponse {
    Task task = 1;
    ContentMetadata root_content = 2;
    ExtractionPolicy extraction_policy = 3;
}

// wait for content to complete all extraction tasks
message WaitContentExtractionRequest {
    string content_id = 1;
}

message WaitContentExtractionResponse {}

// list all contents that have a pending task
message ListActiveContentsRequest {
    string namespace = 1;
}

message ListActiveContentsResponse {
    repeated string content_ids = 1;
}

message UpdateLabelsRequest {
    string namespace = 1;
    string content_id = 2;
    map<string, google.protobuf.Value> labels = 3;
}

message UpdateLabelsResponse {}

message ExecutorsHeartbeatRequest {
    repeated string executors = 1;
}

message ExecutorsHeartbeatResponse {}

message LinkExtractionGraphsRequest {
    string namespace = 1;
    string source_graph_name = 2;
    string content_source = 3;
    string linked_graph_name = 4;
}

message LinkExtractionGraphsResponse {}

message ExtractionGraphLink {
    string content_source = 1;
    string linked_graph_name = 2;
}

message ExtractionGraphLinksRequest {
    string namespace = 1;
    string source_graph_name = 2;
}

message ExtractionGraphLinksResponse {
    repeated ExtractionGraphLink links = 1;
}

message AddGraphToContentRequest {
    string namespace = 1;
    string extraction_graph = 2;
    repeated string content_ids = 3;
}

message AddGraphToContentResponse {}
